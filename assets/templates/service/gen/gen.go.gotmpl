package gen
{{ $projectModule := "" }}
{{ with .Config }}
{{ $projectModule = .Module }}
{{ end }}
import (
    "{{ $projectModule }}/{{ .Package }}/gen/endpoint"
    "{{ $projectModule }}/{{ .Package }}/gen/transport"
    generatedTransport "{{ $projectModule }}/{{ .Package }}/gen/transport/http"
    service "{{ $projectModule }}/{{ .Package }}"
    kitEndpoint "github.com/go-kit/kit/endpoint"
    "github.com/go-kit/kit/transport/http"
)

type serviceTransport struct {
    http generatedTransport.Transport
}

func (b *serviceTransport) HTTP() generatedTransport.Transport {
    return b.http
}
{{ with .Interface }}
type ServiceMiddleware func(service.{{ .Name }}) service.{{ .Name }}

func MakeService(svc service.{{ .Name }}, mdw ...ServiceMiddleware) service.{{ .Name }} {
    for _, m := range mdw {
        svc = m(svc)
    }
    return svc
}

func MakeTransports(endpoints endpoint.Endpoints, httpOptions ...http.ServerOption) transport.Transports {
    httpTransport := generatedTransport.MakeHttpTransport(endpoints, httpOptions...)
    return &serviceTransport{
        http: httpTransport,
    }
}

func MakeEndpoints(b service.{{ .Name }}, global ...kitEndpoint.Middleware) endpoint.Endpoints {
    serviceEndpoints := endpoint.MakeEndpoints(b, global...)
    return serviceEndpoints
}
{{ end }}