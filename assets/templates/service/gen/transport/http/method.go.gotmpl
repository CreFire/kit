package http
{{ $resLength :=  len .Results }}{{ $reqLength :=  len .Params }}
import (
	"{{ .ProjectModule }}/{{ .ServicePackage }}/generated/endpoint"
	"context"
	"encoding/json"

	service "{{ .ProjectModule }}/{{ .ServicePackage }}"
	goKitEndpoint "github.com/go-kit/kit/endpoint"
	goKitHttp "github.com/go-kit/kit/transport/http"
	goHttp "net/http"
)

type {{ .Name }}DecodeRequestFunc func(context.Context, *goHttp.Request) ({{ paramsString .Requests }})

type {{ .Name }}EncodeResponseFunc func(context.Context, goHttp.ResponseWriter{{if eq $resLength 2}}, {{ with index .Results 0}} {{ .Type }} {{ end }}{{end}}) error

type {{ toLowerFirst .Name}} struct {
	methodRoutes []MethodRoute
	options      []goKitHttp.ServerOption
	decoder      {{ .Name }}DecodeRequestFunc
	encoder      {{ .Name }}EncodeResponseFunc
	endpoint     goKitEndpoint.Endpoint
	handle       goHttp.Handler
}

type {{ .Name }}HTTP interface {
	MethodRoutes() []MethodRoute
	AddMethodRoutes(...MethodRoute)
	SetDecoder({{ .Name }}DecodeRequestFunc)
	SetEncoder({{ .Name }}EncodeResponseFunc)
	SetHandle(goHttp.Handler)
	Options([]goKitHttp.ServerOption)
	Handler() goHttp.Handler
}

func make{{.Name}}HttpTransport(endpoint goKitEndpoint.Endpoint) {{.Name}}HTTP {
	return &{{ toLowerFirst .Name }}{
		methodRoutes: {{ toLowerFirst .Name }}RouteMethods(),
		decoder:      {{ toLowerFirst .Name }}Decoder,
		encoder:      {{ toLowerFirst .Name }}Encoder,
		endpoint:     endpoint,
	}
}

func {{ toLowerFirst .Name }}RouteMethods() []MethodRoute {
	return []MethodRoute{
		{{range .MethodRoutes}}{
			Name:   "{{.Name}}",
			Route:  "{{.Route}}",
			Methods: {{.Methods}},
		},
	{{end}}}
}
func {{ toLowerFirst .Name }}Decoder(_ context.Context, r *goHttp.Request) ({{if eq $reqLength 2}}request {{ with index .Params 1}} {{ .Type }} {{ end }}, {{end}}err error) {
{{if eq $reqLength 2}}request = {{ with index .Params 1}} {{ .Type }} {{ end }}{}
	err = json.NewDecoder(r.Body).Decode(&req)
	return request, err{{ else }}return nil{{ end }}
}

func {{ toLowerFirst .Name }}Encoder(ctx context.Context, w goHttp.ResponseWriter{{if eq $resLength 2}}, response {{ with index .Results 0}} {{ .Type }} {{ end }}{{end}}) error {
	{{if eq $resLength 2}}return goKitHttp.EncodeJSONResponse(ctx, w, response){{else}}return nil{{ end }}
}

func (h *{{ toLowerFirst .Name }}) MethodRoutes() []MethodRoute {
	return h.methodRoutes
}

func (h *{{ toLowerFirst .Name }}) Options(options []goKitHttp.ServerOption) {
	h.options = append(h.options, options...)
}

func (h *{{ toLowerFirst .Name }}) AddMethodRoutes(methodRoutes ...MethodRoute) {
	h.methodRoutes = append(h.methodRoutes, methodRoutes...)
}

func (h *{{ toLowerFirst .Name }}) SetDecoder(decoder {{.Name}}DecodeRequestFunc) {
	h.decoder = decoder
}

func (h *{{ toLowerFirst .Name }}) SetEncoder(encoder {{.Name}}EncodeResponseFunc) {
	h.encoder = encoder
}

func (h *{{ toLowerFirst .Name }}) SetHandle(handle goHttp.Handler) {
	h.handle = handle
}

func (h *{{ toLowerFirst .Name }}) Handler() goHttp.Handler {
	if h.handle != nil {
		return h.handle
	}
	encoder := func(ctx context.Context, w goHttp.ResponseWriter, response interface{}) error {
		epResponse := response.(endpoint.{{.Name}}Response)
		if epResponse.Err != nil {
			defaultErrorEncoder(ctx, epResponse.Err, w)
			return nil
		}
        {{ if eq $resLength 2 }}res := epResponse.Response{{ end }}
		return h.encoder(ctx, w{{ if eq $resLength 2 }}, res{{ end }})
	}
	decoder := func(ctx context.Context, r *goHttp.Request) (re interface{}, err error) {
		return h.decoder(ctx, r)
	}
	return goKitHttp.NewServer(
		h.endpoint,
		decoder,
		encoder,
		h.options...,
	)
}
